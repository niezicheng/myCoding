NodeJS环境中支持大部分的ES6的功能

ES6新特性
	语法方面
		let var 
		let a = 1;
		const 常量命名

		...
		(形参)=>{函数体内容}  箭头函数
		function add(a,b){
			return a+b;
		}
		(a,b)=>{[return] a+b;}
		a=>a === function(a){return a;}

	功能方面
		对对象、函数、数组进行功能性扩展
		复制一个对象
			let obj = {
				name:'zhangsan',
				age:12
			};

			JSON解析：
				JSON.parse(JSON.stringify(obj));

			for in 循环：
				let obj2 = {};
				for(var key in obj){
					obj2[key] = obj[key];
				}

			es6:assign()方法：
				let obj2 = {};
				Object.assign(obj2,obj,obj3);  将obj和obj3中的所有属性方法复制到obj对象中【arguments】

			...
			Set Map Class
			使用类创建实例【使用类实现继承】【构造器、extends】

			Promise 承诺对象   异步请求承诺

			模块化...    对比NodeJS模块化

		webpack打包工具


NodeJS
	环境，后台语言
	封装google v8引擎，js解析器
	npm包管理工具
		包---模块---第三方模块
		npm
			node package manage
			下载依赖，删除依赖，更新依赖【依赖：第三方包】

		cnpm 淘宝镜像的npm工具 (vue推荐使用)
			npm install -g cnpm       -g:global  全局安装
				npm使用的是国外的镜像

			cnpm install -g babel-cli
				cnpm使用的是国内的镜像

		yarn 包管理工具  (React推荐使用)
			yarn add babel-cli


NodeJS内置模块介绍【无需下载第三方包管理工具】
	NodeJS后台语言
	模块：
		url  网址模块
		http	服务器模块，用http模块可以搭建服务器
		path  文件路径模块
		querystring		查询字符串模块

		第三方：express框架基于http模块【学习Node.js前端后台使用语言】



ES6中Promise承诺


ES6
	用ES6写的代码，NodeJS绝大部分支持，浏览器的支持程度比较弱

	项目最终运行在浏览器上面，ES6->ES5
	使用Babel工具将ES6的代码转换为ES5的代码
	安装 cnpm
		npm install -g cnpm --registry=https://registry.npm.taobao.org
	Babel工具的使用
		1、全局安装babel工具
			cnpm install -g babel-cli
				babel --version
		2、局部安装转换规则包
			cnpm install babel-preset-latest
			cnpm install babel-preset-es2015
			cnpm install babel-preset-env
		3、编写babel的配置文件
			项目根目录底下 .babelrc
			{
				'presets':['latest']
			}
		4、编写ES6代码 a.js
		5、转换
			babel a.js

	babel工具只转换语法层次
	babel-polyfill垫片 ，将ES6的新功能新特性转换为es5代码


安装的位置
	全局安装 -g --global
	局部安装  在当前所处的目录位置安装

	node_modules 文件夹     放置第三方的文件夹

	根目录  node_modules【使用全局安装  则安装到根目录下】   【从自身目录开始找，没有找到依次向父目录底下寻找直到根目录】
		...
		/day01
			node_modules
		/day01/app
			node_modules【局部安装的位置】

第三方包
	package.json中记录的是项目相关的信息

	dependencies 产品阶段的依赖
		cnpm install --save babel-cli
			dependencies:{
				babel-cli:''
			}

	devDependencies 项目开发阶段的需要的依赖
		cnpm install --save-dev babel-cli
			devDependencies:{
				babel-cli:''
			}


babel命令
	babel 文件名	将转换的结果输出到终端
	babel 文件名1 --out-file 文件名2	【将文件名1中的ES6代码转化为es5代码并输入到文件名2中(没有该文件就创建)】
		babel 1-a.js --out-file dist/2-a.js  【转换时目录应该已经存在，否则无法复制到指定路径的指定文件中】
	babel 目录名1 --out-dir 目录名2 		【将目录名1中的所有文件转换为ES5代码并输入到目录名2中】


项目升级
	在安装依赖时需要记录，让使用该项目的人可以一眼看出项目的信息以及依赖,需要写package.json

	babel-cli
	babel-preset-latest

	package.json
		在项目底下执行命令
				cnpm init -y       快捷生成package.json文件
				cnpm init   生成package.json文件


1、package.json
	cnpm init -y
2、下载项目依赖	
	cnpm install --save-dev babel-cli babel-preset-latest
3、编写babel的配置文件
	项目根目录底下 .babelrc
	{
		'presets':['latest']
	}
4、新增指令
在package.json的
	"scripts":{
		"start":"babel src --out-dir dist",
		"dev":"npm run start"
	}
5、编写src底下的ES6代码
6、转换
	babel src --out-dir dist
	cnpm run start
	cnpm run dev
	npm run start
	npm run dev
	npm start

项目升级的好处
1、可以再package.json中读取到需要的信息，项目依赖的包以及如何启动项目
2、拿到没有node_modules的项目，先打开package。json查看依赖
在项目根目录使用cnpm install命令 【下载项目中所有的依赖】



let的特点
	1、代码块中的局部变量
	2、let声明的变量不会提升
	3、会出现暂时性死区【在变量声明前使用该变量会出现该现象】
	4、不可重复声明